package com.winthier.exploits;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import org.bukkit.World;
import org.bukkit.block.Block;

@Getter @RequiredArgsConstructor
class BlockWorld {
    private final World world;
    private final Map<BlockRegion.Vector, BlockRegion> regions = new HashMap<>();

    private BlockRegion getBlockRegion(BlockRegion.Vector position) {
        BlockRegion result = regions.get(position);
        if (result == null) {
            result = new BlockRegion(this, position);
            result.load();
            result.setLastSave(System.currentTimeMillis());
            regions.put(position, result);
        }
        return result;
    }

    private BlockChunk getBlockChunk(Block block) {
        BlockChunk.Vector chunkVector = BlockChunk.Vector.of(block);
        BlockRegion.Vector regionVector = BlockRegion.Vector.of(chunkVector);
        return getBlockRegion(regionVector).getBlockChunk(chunkVector);
    }

    boolean isBlockSet(Block block) {
        BlockChunk chunk = getBlockChunk(block);
        chunk.getBlockRegion().setLastUsed(System.currentTimeMillis());
        return chunk.isBlockSet(block);
    }

    void setBlock(Block block, boolean value) {
        BlockChunk chunk = getBlockChunk(block);
        chunk.getBlockRegion().setLastUsed(System.currentTimeMillis());
        chunk.getBlockRegion().setDirty(true);
        chunk.setBlock(block, value);
    }

    void autoSaveAndGC() {
        long now = System.currentTimeMillis();
        for (BlockRegion region: new ArrayList<>(regions.values())) {
            if (region.isDirty() && region.getLastSave() + 1000 * 60 < now) {
                region.save();
                region.setDirty(false);
                region.setLastSave(now);
            }
            if (region.getLastUsed() + 1000 * 60 < now) {
                if (region.isDirty()) region.save();
                regions.remove(region.getPosition());
            }
        }
    }

    void onDisable() {
        for (BlockRegion region: new ArrayList<>(regions.values())) {
            if (region.isDirty()) {
                region.save();
            }
        }
        regions.clear();
    }
}
