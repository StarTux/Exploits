package com.winthier.exploits.bukkit;

import com.winthier.exploits.ExploitsPlugin;
import lombok.Getter;
import org.bukkit.Location;
import org.bukkit.attribute.Attributable;
import org.bukkit.attribute.Attribute;
import org.bukkit.block.Block;
import org.bukkit.entity.Damageable;
import org.bukkit.entity.Player;

/**
 * Carry over from the legacy plugin for bacwards source and hopefully
 * binary compatibility.
 */
public final class BukkitExploits {
    private final ExploitsPlugin plugin;
    @Getter private static BukkitExploits instance;

    public BukkitExploits(ExploitsPlugin plugin) {
        this.plugin = plugin;
        instance = this;
    }

    public boolean isPlayerPlaced(Block block) {
        return plugin.getPlayerPlacedBlocks().isPlayerPlaced(block);
    }

    public void setPlayerPlaced(Block block, boolean playerPlaced) {
        plugin.getPlayerPlacedBlocks().setPlayerPlaced(block, playerPlaced);
    }

    public boolean isPlayerPlaced(Location location) {
        return isPlayerPlaced(location.getBlock());
    }

    public void setPlayerPlaced(Location location, boolean playerPlaced) {
        setPlayerPlaced(location.getBlock(), playerPlaced);
    }

    // Entity Damage

    public double getEntityDamageByPlayer(Damageable entity) {
        return plugin.getPlayerActions().getPlayerDamage(entity);
    }

    public double getEntityDamageByPlayerPercentage(Damageable entity) {
        return getEntityDamageByPlayer(entity) / getMaxHealth(entity);
    }

    public double getEntityDamageByPlayerRemainder(Damageable entity) {
        return getMaxHealth(entity) - getEntityDamageByPlayer(entity);
    }

    public double getEntityDamageByPlayerRemainderPercentage(Damageable entity, double damage) {
        return Math.max(0, Math.min(damage, getEntityDamageByPlayerRemainder(entity)) / getMaxHealth(entity));
    }

    private static double getMaxHealth(Damageable entity) {
        if (entity instanceof Attributable) {
            return ((Attributable)entity).getAttribute(Attribute.GENERIC_MAX_HEALTH).getValue();
        } else {
            return 10.0;
        }
    }

    // Build

    public boolean didRecentlyPlace(Player player, Block block, long seconds) {
        return plugin.getPlayerActions().didRecentlyPlace(player, block, seconds);
    }

    public boolean didRecentlyBreak(Player player, Block block, long seconds) {
        return plugin.getPlayerActions().didRecentlyBreak(player, block, seconds);
    }

    public boolean didRecentlyFish(Player player, Block block, long seconds) {
        return plugin.getPlayerActions().didRecentlyFish(player, block, seconds);
    }

    // Mob kill stuff

    public double recentKillDistance(Player player, Location newKill, long seconds) {
        return plugin.getPlayerActions().recentKillDistance(player, newKill, seconds);
    }
}
